// Knowledge Graph Adapter for XoptYmiZ
const XoptYmiZKnowledgeGraph = require('./KnowledgeGraphEngine');

class KnowledgeGraphAdapter {
    constructor() {
        this.knowledgeGraph = new XoptYmiZKnowledgeGraph({
            uri: process.env.NEO4J_URI,
            username: process.env.NEO4J_USER,
            password: process.env.NEO4J_PASSWORD
        });
    }

    async storeContent(processedContent) {
        try {
            console.log('🧠 Storing in Knowledge Graph:', processedContent.url);
            
            // Use your sophisticated knowledge graph storage
            const result = await this.knowledgeGraph.storeContent(processedContent);
            
            console.log('✅ Stored in knowledge graph');
            return result;
        } catch (error) {
            console.error('❌ Knowledge Graph storage error:', error.message);
            // Don't throw - allow processing to continue without KG storage
            return null;
        }
    }

    async getGraphForDomain(domain, options = {}) {
        try {
            console.log('🔍 Getting knowledge graph for:', domain);
            
            const result = await this.knowledgeGraph.getGraphForDomain(domain, options);
            
            return result;
        } catch (error) {
            console.error('❌ Knowledge Graph retrieval error:', error.message);
            throw error;
        }
    }

    async generateLLMsTxt(domain, options = {}) {
        try {
            console.log('📄 Generating LLMs.txt for:', domain);
            
            const llmsTxt = await this.knowledgeGraph.generateLLMsTxt(domain, options);
            
            return llmsTxt;
        } catch (error) {
            console.error('❌ LLMs.txt generation error:', error.message);
            // Return fallback LLMs.txt
            return this.generateFallbackLLMsTxt(domain);
        }
    }

    generateFallbackLLMsTxt(domain) {
        return '# LLMs.txt for ' + domain + '\n' +
               '# Generated by XoptYmiZ Engine\n\n' +
               '## Status\n' +
               'Knowledge graph not available - using fallback generation\n\n' +
               '## Generated\n' +
               'Timestamp: ' + new Date().toISOString() + '\n' +
               'Tool: XoptYmiZ Engine v1.0.0\n';
    }

    async testConnection() {
        try {
            return await this.knowledgeGraph.testConnection();
        } catch (error) {
            return false;
        }
    }

    async close() {
        try {
            if (this.knowledgeGraph.close) {
                await this.knowledgeGraph.close();
            }
        } catch (error) {
            console.error('Error closing knowledge graph connection:', error.message);
        }
    }
}

module.exports = KnowledgeGraphAdapter;
